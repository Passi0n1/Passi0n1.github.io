<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Passi0n1&#39;s Blog</title>
    <link>http://localhost:1313/posts/</link>
    <description>Recent content in Posts on Passi0n1&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>Rise. 本站遵循 CC-BY-NC 4.0 协议</copyright>
    <lastBuildDate>Fri, 21 Feb 2025 11:25:05 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>StephereNFTs 遭遇重入攻击分析</title>
      <link>http://localhost:1313/posts/vol.1--step-hero%E9%87%8D%E5%85%A5%E6%94%BB%E5%87%BB/</link>
      <pubDate>Fri, 21 Feb 2025 11:25:05 +0000</pubDate>
      <guid>http://localhost:1313/posts/vol.1--step-hero%E9%87%8D%E5%85%A5%E6%94%BB%E5%87%BB/</guid>
      <description>攻击概述 2025 年 2 月 ，StephereNFTs 遭遇了一起严重的重入攻击，攻击者通过精心构造的恶意合约，利用智能合约逻辑漏洞，成功盗取了大量资金。&#xA;参考地址： https://nickfranklin.site/2025/02/21/stepheronfts-attacked/&#xA;相关地址 受害合约地址：0x9823e10a0bf6f64f59964be1a7f83090bf5728ab 攻击者地址：0xFb1cc1548D039f14b02cfF9aE86757Edd2CDB8A5 恶意合约1：0xd4c80700ca911d5d3026a595e12aa4174f4cacb3 恶意合约2：0xb4c32404de3367ca94385ac5b952a7a84b5bdf76 恶意合约3：0x8f327e60fb2a7928c879c135453bd2b4ed6b0fe9 攻击交易 (tx)：https://bscscan.com/tx/0xef386a69ca6a147c374258a1bf40221b0b6bd9bc449a7016dbe5240644581877 攻击步骤解析 1. 部署恶意合约 攻击者首先部署了多个恶意合约，以便后续进行重入攻击。&#xA;图1 2. 通过闪电贷获取初始资金 攻击者利用闪电贷借入了一笔资金，用于后续触发合约的奖励机制。&#xA;图2 图3 通过购买资产获取奖励资格 3. 通过重入攻击不断获取受害合约资金 攻击者发现受害合约的奖励机制存在漏洞：&#xA;在领取奖励时，合约会检查推荐奖励的数量。 但由于合约先发放奖励，再将奖励计数清零，导致可以在清零前重复调用领取奖励函数，实现重入攻击。 攻击者利用这一漏洞，不断调用恶意合约，通过递归方式重复领取奖励，最终盗取了大量资金。&#xA;关键漏洞分析 该攻击的核心漏洞在于 先发奖励后清零 的逻辑顺序问题，导致了经典的重入攻击 (Reentrancy Attack)。&#xA;漏洞代码示例：&#xA;function claimReferral(address varg0) public nonPayable { find similar require(msg.data.length - 4 &amp;gt;= 32); require(!_paused, Error(&amp;#39;Pausable: paused&amp;#39;)); require(owner_5[msg.sender][varg0], Error(&amp;#39;not-enough-money&amp;#39;)); 0x2d1e(varg0, owner_5[msg.sender][varg0], msg.sender); owner_5[msg.sender][varg0] = 0; emit 0x9c21c092f05b64df5ae0cbf557b9bf4e9695cdbeaa13fcf9a0831bce847f0cfb(msg.sender, varg0, owner_5[msg.sender][varg0]); } 攻击者可以重复调用重新调用 claimReferral，从而在清零前多次获取奖励。</description>
    </item>
  </channel>
</rss>
